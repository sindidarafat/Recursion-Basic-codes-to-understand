# -*- coding: utf-8 -*-
"""Recursion Practice  22201503

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1npa9vL7Lkcmqmaivm3axl-1CHKT0B5Ss
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

import math

class Node:
  def __init__(self, elem, next = None):
    self.elem = elem
    self.next = next

def create_linked_list(arr):
  head = Node(arr[0])
  tail = head
  for i in arr[1:]:
    new_node = Node(i)
    tail.next = new_node
    tail = new_node
  return head

"""--------------------------1--------------------

"""

def DigitSum(n, sum=0) :
    if n<10:
        return n
    sum=n%10
    return sum+DigitSum(n//10,sum)
print(DigitSum(12345))

"""--------------------2-------------------"""

def bunnyEars(n) :
    if n==0:
        return 0
    if n%2==0:
        res=3
    if n%2!=0:
        res=2
    return res+bunnyEars(n-1)
print(bunnyEars(2))

"""---------------3--------------"""

def counter(n):
    if n==0:
        return 0
    if n%10==7:
        return 1+counter(n//10)
    else:
        return counter(n//10)



print(counter(11172227333744475557))

"""--------------------4-------------------"""

def finderNum(arr):
    if arr=='x':
        return 1
    if len(arr)==1 and arr!="x":
        return 0
    if arr[0]=='x':
        return 1+finderNum(arr[1: ])
    else:
        return finderNum(arr[1: ])
print(finderNum("xxxvvvxxxhi"))

"""---------------5--------------"""

def changePi(arr,count=0):
    if arr==None:
        return arr
    if count==len(arr)-1:
        return arr
    if arr[count]=='p' and arr[count+1]=='i' :
        x=arr[0:count]
        y=arr[count+2::]
        arr= x +'3.14'+y
        count+=1
        return changePi(arr, count)
    count+=1
    return changePi(arr,count)
print(changePi("pip"))
print(changePi("xpix"))
print(changePi("xxpixxpipiyyaib"))

"""--------------------6------------------"""

def array11(arr, n) :
    if arr==[11]:
        n+=1
        return n
    if arr[0]==11 :
        n+=1
        return array11(arr[1::], n)
    return array11(arr[1::],n)
print(array11([11, 112, 11,11,12,11], 0))

"""-------------7-------------

"""

def pairStar(arr,count=0):
    if arr==None:
        return arr
    if count==len(arr)-1:
        return arr
    if arr[count]==arr[count+1] :
        x=arr[0:count+1]
        y=arr[count+1::]
        arr= x +'*'+y
        count+=1
        return pairStar(arr, count)
    count+=1
    return pairStar(arr,count)
print(pairStar("aaaaa"))

"""--------------------------8---------------------"""

def countAbc(arr) :
    if arr=="abc":
        return 1
    if (len(arr))<3 :
        return 0
    if arr[0]=='a'and arr[1]=='b' and arr[2]=='c':
        return 1 + countAbc(arr[1::])
    return countAbc(arr[1::])
print(countAbc("abcxxxxxxxabcxxxx"))

"""--------------9-------------

"""

def countHi2(arr) :
    if arr=='hi' :
        return 1
    if len(arr)<3 :
        return 0
    if arr[0]!='x' and arr[1]=='h' and arr[2]=='i' :
        return 1+countHi2(arr[1::])
    return countHi2(arr[1::])
print(countHi2('xhiahibhichi'))

"""--------------10--------------

"""

def strCount(arr,sub):
    if len(arr)<len(sub):
        return 0
    if arr[:len(sub)]==sub:
        return 1+strCount(arr[1::],sub)
    if arr[:len(sub)] != sub:
        return strCount(arr[1::],sub)
print(strCount("catcowcatcat","cat"))

"""------------11-----------"""

def bunnyEars2(n):
    if n==1:
        return 2
    return 2+ bunnyEars2(n-1)
print(bunnyEars2(2))

"""-----------12----------"""

def triangle(n) :
    if n==0:
        return 0
    return n+ triangle(n-1)
print(triangle(3))

"""-------------13------------"""

def noX(arr,s='') :
    if len(arr)==0:
        return ""
    if arr[0]=='x' or arr[0]=='X' :
        return noX(arr[1::])
    s=str(arr[0])
    return s + noX(arr[1::],s)
print(noX('xxxsxxixxnxxdxxixxd'))

"""-----------14-----------"""

def checker(arr,n,flag=False) :
    if len(arr)==0:
        return
    if arr[0] / n ==10:
        flag=True
    return checker(arr[1::],n,flag)

def array220(arr,n, flag=False) :
    if n==0:
        n=arr[0]
    if len(arr)==0:
        return flag
    if arr[0] / n ==10:
        flag=True
    checker(arr,arr[0])
    if checker==True:
        flag=True
    if checker==False:
        flag=False
    return array220(arr[1::],arr[0],flag)

print(array220([1,3,20],0))

"""----------15---------

"""

def addx(n,o):
    if n==0:
        return o
    o+='x'
    n-=1
    return addx(n,o)
def endX(arr,o='',count=0) :

    if len(arr)==0:
        x=addx(count,o)
        return x
    if arr[0]!='x':
        o+=str(arr[0])
        return endX(arr[1::],o,count)
    count+=1
    return endX(arr[1::],o,count)

print(endX('xsxixnxdxixdxx'))

"""----------16--------"""

def count11(arr):
    if len(arr)<2:
        return 0
    if arr[0]=='1' and arr[1]=='1' :
        return 1+ count11(arr[2::])
    return count11(arr[1::])
print(count11('1111abcand11dfbdf11111'))

"""--------17--------"""

def parenBit(arr,ot='',flag=False):
    # print(arr,ot,flag)
    if arr[0]=='(':
        flag=True
        ot+=str(arr[0])
        # print(ot)
        return parenBit(arr[1::],ot,flag)
    if arr[0]==')' :
        ot+=str(arr[0])
        return ot
    if flag==True:
        ot+=str(arr[0])
        return parenBit(arr[1::],ot,flag)
    if flag==False:
        return parenBit(arr[1::],ot,flag)

print(parenBit("xysya(abbbb)11223"))

"""----------18-----------

"""

def strCopies(arr,sub,n,flag=False,count=0):
    if count==n:
        flag=True
    if len(arr)<len(sub):
        return flag
    if arr[:len(sub)]==sub:
        count+=1
        return strCopies(arr[len(sub)::],sub,n,flag,count)
    flag=False
    return strCopies(arr[len(sub)::],sub,n,flag,count)
print(strCopies('cowcatcatcow','cow',1))